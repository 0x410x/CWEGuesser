# app.py
from flask import Flask, render_template, request, jsonify
import pickle
import os
import numpy as np

app = Flask(__name__)

first_request_done = False

def load_model():
    global vectorizer, classifier, top_cwes
    
    try:
        with open('cve_cwe_vectorizer.pkl', 'rb') as f:
            app.vectorizer = pickle.load(f)
        
        with open('cve_cwe_classifier.pkl', 'rb') as f:
            app.classifier = pickle.load(f)
        
        with open('top_cwes.pkl', 'rb') as f:
            app.top_cwes = pickle.load(f)
            
        app.model_loaded = True
    except FileNotFoundError:
        app.model_loaded = False    
        print("This runs only once!")

@app.before_request
def before_request_func():
    global first_request_done
    if not first_request_done:
        with app.app_context():
            load_model()
        first_request_done = True

# Load the trained model components


# Text preprocessing function (same as in training)
def preprocess_text(text):
    import re
    # Convert to lowercase
    text = text.lower()
    
    # Remove special characters, keeping only letters, numbers and spaces
    text = re.sub(r'[^a-zA-Z0-9\s]', ' ', text)
    
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

# Prediction function
def predict_cwe(description, threshold=0.3):
    # Preprocess the input
    preprocessed = preprocess_text(description)
    
    # Vectorize
    description_tfidf = app.vectorizer.transform([preprocessed])
    
    # Get raw prediction probabilities
    proba = app.classifier.predict_proba(description_tfidf)
    
    # Get predictions above threshold
    predictions = []
    for i, cwe in enumerate(app.top_cwes):
        if proba[0][i] >= threshold:
            predictions.append({
                'cwe': cwe,
                'probability': float(proba[0][i])
            })
    
    # Sort by probability
    predictions = sorted(predictions, key=lambda x: x['probability'], reverse=True)
    
    return predictions

# Home page
@app.route('/')
def home():
    return render_template('index.html', model_loaded=app.model_loaded)

# Prediction API endpoint (for AJAX calls or direct API use)
@app.route('/api/predict', methods=['POST'])
def api_predict():
    if not app.model_loaded:
        return jsonify({
            'error': 'Model not loaded. Please ensure model files exist.',
            'predictions': []
        }), 503
    
    # Get description from request
    data = request.get_json()
    description = data.get('description', '')
    
    if not description:
        return jsonify({
            'error': 'No description provided',
            'predictions': []
        }), 400
    
    # Make prediction
    predictions = predict_cwe(description)
    
    # Return as JSON
    return jsonify({
        'description': description,
        'predictions': predictions
    })

# Web form submission endpoint
@app.route('/predict', methods=['POST'])
def web_predict():
    if not app.model_loaded:
        return render_template('index.html', 
                              error='Model not loaded. Please ensure model files exist.',
                              model_loaded=False)
    
    # Get description from form
    description = request.form.get('description', '')
    
    if not description:
        return render_template('index.html', 
                              error='Please enter a vulnerability description.',
                              model_loaded=app.model_loaded)
    
    # Make prediction
    predictions = predict_cwe(description)
    
    # Return results page
    return render_template('results.html', 
                          description=description, 
                          predictions=predictions,
                          model_loaded=app.model_loaded)

# CWE information endpoints (to get more details about a particular CWE)
@app.route('/cwe/<cwe_id>')
def cwe_info(cwe_id):
    # This could be expanded to fetch information from a CWE database
    # For now, we'll return basic information
    cwe_descriptions = {
        'CWE-79': 'Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)',
        'CWE-787': 'Out-of-bounds Write',
        'CWE-89': 'Improper Neutralization of Special Elements used in an SQL Command (SQL Injection)',
        'CWE-125': 'Out-of-bounds Read',
        'CWE-20': 'Improper Input Validation',
        'CWE-416': 'Use After Free',
        'CWE-22': 'Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)',
        'CWE-352': 'Cross-Site Request Forgery (CSRF)',
        'CWE-78': 'Improper Neutralization of Special Elements used in an OS Command (OS Command Injection)',
        'CWE-862': 'Missing Authorization',
        # Add more as needed
    }
    
    description = cwe_descriptions.get(cwe_id, f'Information for {cwe_id} not available')
    
    return jsonify({
        'cwe_id': cwe_id,
        'description': description,
        'url': f'https://cwe.mitre.org/data/definitions/{cwe_id[4:]}.html'
    })

if __name__ == '__main__':
    app.model_loaded = False  # Will be set to True if models load successfully
    app.run(debug=True)
